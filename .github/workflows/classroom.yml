name: Auto-grading

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Pull updates from upstream
      run: |
        # Configure git to allow merging unrelated histories
        git config --global pull.rebase false
        
        # Determine the upstream repository URL based on the current repository
        # This assumes the student repository name follows the pattern: assignment-username
        # and the upstream repository is named 'assignment-template'
        REPO_NAME=$(basename $(git rev-parse --show-toplevel))
        UPSTREAM_ORG=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        UPSTREAM_REPO="assignment-template"
        UPSTREAM_URL="https://github.com/$UPSTREAM_ORG/$UPSTREAM_REPO.git"
        
        echo "Setting upstream to: $UPSTREAM_URL"
        
        # Add the upstream repository
        git remote add upstream $UPSTREAM_URL
        
        # Fetch the latest changes from upstream
        git fetch upstream
        
        # Merge the changes from upstream/main into the current branch
        git merge upstream/main --allow-unrelated-histories
        
        # If there are conflicts, resolve them by taking the upstream version
        # This is a simple approach - you might want more sophisticated conflict resolution
        git checkout --theirs tests/
        git add tests/
        
        # Commit the merged changes
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        git commit -m "Merge updates from upstream template"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
    
    - name: Run tests
      run: |
        pytest tests/test_email_hasher.py -v
    
    - name: Check for README.md
      run: |
        if [ ! -f "README.md" ]; then
          echo "ERROR: README.md file is missing"
          exit 1
        fi
        
        if ! grep -q "http" README.md; then
          echo "WARNING: README.md might be missing a link to music recommendation"
        fi
    
    - name: Verify hash format
      run: |
        # Create a test email hasher script if it doesn't exist
        if [ ! -f "email_hasher.py" ]; then
          echo "ERROR: email_hasher.py file is missing"
          exit 1
        fi
        
        # Run the script with a test email
        python email_hasher.py "test@example.com"
        
        # Check if hash.email file exists
        if [ ! -f "hash.email" ]; then
          echo "ERROR: hash.email file was not created"
          exit 1
        fi
        
        # Read the hash and remove all whitespace
        HASH_OUTPUT=$(cat hash.email | tr -d '[:space:]')
        
        # Check hash length (should be 64 characters)
        if [ ${#HASH_OUTPUT} -ne 64 ]; then
          echo "ERROR: Hash length is not 64 characters (after removing whitespace)"
          exit 1
        fi
        
        # Check that all characters are valid hex digits
        if ! [[ $HASH_OUTPUT =~ ^[0-9a-fA-F]{64}$ ]]; then
          echo "ERROR: Hash contains non-hexadecimal characters"
          exit 1
        fi
        
        echo "Hash format verification passed" 
